" Install VIM Plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Load all plugins now.
" VIM Plug section
call plug#begin()
if has('nvim')
Plug 'tpope/vim-fugitive'
Plug 'lifepillar/vim-solarized8'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
endif
call plug#end()
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
" Enable completion where available.
let g:ale_completion_enabled = 1
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>ut :UndotreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" enable syntax highlighting
syntax on
" map gt to next tab
map gt :tabn<CR>
" map gT to previous tab
map gT :tabp<CR>

" enable true color if supported by terminal
if has('termguicolors')
  set termguicolors
endif

set background=dark
autocmd vimenter * ++nested colorscheme solarized8
" colorscheme solarized8
" set indent
set tabstop=8 expandtab shiftwidth=4 softtabstop=4
set smartindent
set autoindent
set splitright
" save file automatically if :make is called
set autowrite
" Toggle quickfix list for vim-go
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
let g:deoplete#enable_at_startup = 1
" shows go functions in directory by pres \gt
au FileType go nmap <leader>gt :GoDeclsDir<cr>
" go to definition go back by C-t
au FileType go nmap <F12> :GoDef<cr>
" map exit for neovim terminal
:tnoremap <Esc> <C-\><C-n>

" Define which python3 to use
let g:python3_host_prog = '/usr/bin/python3'

" Disable mouse because it conflicts with tmux
set mouse=
